!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
W	../rbm_chords.py	/^W = tf.Variable(tf.random_normal([n_visible, n_hidden], 0.01), name="W")$/;"	kind:variable	line:61
W_adder	../rbm_chords.py	/^W_adder = tf.multiply(lr \/ size_bt,$/;"	kind:variable	line:111
batch_size	../rbm_chords.py	/^batch_size = 100  # The number of training examples that we are going to send through the RBM at a time.$/;"	kind:variable	line:53
bh	../rbm_chords.py	/^bh = tf.Variable(tf.zeros([1, n_hidden], tf.float32, name="bh"))$/;"	kind:variable	line:63
bh_adder	../rbm_chords.py	/^bh_adder = tf.multiply(lr \/ size_bt, tf.reduce_sum(tf.subtract(h, h_sample), 0, True))$/;"	kind:variable	line:114
bv	../rbm_chords.py	/^bv = tf.Variable(tf.zeros([1, n_visible], tf.float32, name="bv"))$/;"	kind:variable	line:65
bv_adder	../rbm_chords.py	/^bv_adder = tf.multiply(lr \/ size_bt, tf.reduce_sum(tf.subtract(x, x_sample), 0, True))$/;"	kind:variable	line:113
control_flow_ops	../rbm_chords.py	/^from tensorflow.python.ops import control_flow_ops$/;"	kind:namespace	line:9
get_songs	../rbm_chords.py	/^def get_songs(path):$/;"	kind:function	line:23
gibbs_sample	../rbm_chords.py	/^def gibbs_sample(k):$/;"	kind:function	line:78
gibbs_step	../rbm_chords.py	/^    def gibbs_step(count, k, xk):$/;"	kind:function	line:80
glob	../rbm_chords.py	/^import glob$/;"	kind:namespace	line:7
h	../rbm_chords.py	/^h = sample(tf.sigmoid(tf.matmul(x, W) + bh))$/;"	kind:variable	line:104
h_sample	../rbm_chords.py	/^h_sample = sample(tf.sigmoid(tf.matmul(x_sample, W) + bh))$/;"	kind:variable	line:106
highest_note	../rbm_chords.py	/^highest_note = midi_manipulation.upperBound  # the index of the highest note on the piano roll$/;"	kind:variable	line:44
init	../rbm_chords.py	/^    init = tf.global_variables_initializer()$/;"	kind:variable	line:124
lowerBound	../midi_manipulation.py	/^lowerBound = 24$/;"	kind:variable	line:5
lowest_note	../rbm_chords.py	/^lowest_note = midi_manipulation.lowerBound  # the index of the lowest note on the piano roll$/;"	kind:variable	line:43
lr	../rbm_chords.py	/^lr = tf.constant(0.005, tf.float32)  # The learning rate of our model$/;"	kind:variable	line:54
midi	../midi_manipulation.py	/^import midi$/;"	kind:namespace	line:1
midiToNoteStateMatrix	../midi_manipulation.py	/^def midiToNoteStateMatrix(midifile, squash=True, span=span):$/;"	kind:function	line:10
midi_manipulation	../rbm_chords.py	/^import midi_manipulation$/;"	kind:namespace	line:16
midi_manipulation.py	../midi_manipulation.py	1;"	kind:file	line:1
msgpack	../rbm_chords.py	/^import msgpack$/;"	kind:namespace	line:6
n_hidden	../rbm_chords.py	/^n_hidden = 50  # This is the size of the hidden layer$/;"	kind:variable	line:49
n_visible	../rbm_chords.py	/^n_visible = 2 * note_range * num_timesteps  # This is the size of the visible layer.$/;"	kind:variable	line:48
noteStateMatrixToMidi	../midi_manipulation.py	/^def noteStateMatrixToMidi(statematrix, name="example", span=span):$/;"	kind:function	line:72
note_range	../rbm_chords.py	/^note_range = highest_note - lowest_note  # the note range$/;"	kind:variable	line:45
np	../midi_manipulation.py	/^import numpy as np$/;"	kind:namespace	line:2
np	../rbm_chords.py	/^import numpy as np$/;"	kind:namespace	line:4
num_epochs	../rbm_chords.py	/^num_epochs = 200  # The number of training epochs that we are going to run.$/;"	kind:variable	line:51
num_timesteps	../rbm_chords.py	/^num_timesteps = 15  # This is the number of timesteps that we will create at a time$/;"	kind:variable	line:47
os	../rbm_chords.py	/^import os$/;"	kind:namespace	line:18
pd	../rbm_chords.py	/^import pandas as pd$/;"	kind:namespace	line:5
rbm_chords.py	../rbm_chords.py	1;"	kind:file	line:1
sample	../rbm_chords.py	/^    sample = gibbs_sample(1).eval(session=sess, feed_dict={x: np.zeros((10, n_visible))})$/;"	kind:variable	line:142
sample	../rbm_chords.py	/^def sample(probs):$/;"	kind:function	line:70
size_bt	../rbm_chords.py	/^size_bt = tf.cast(tf.shape(x)[0], tf.float32)$/;"	kind:variable	line:110
songs	../rbm_chords.py	/^songs = get_songs('Pop_Music_Midi')  # These songs have already been converted from midi to msgpack$/;"	kind:variable	line:36
span	../midi_manipulation.py	/^span = upperBound-lowerBound$/;"	kind:variable	line:7
tf	../rbm_chords.py	/^import tensorflow as tf$/;"	kind:namespace	line:8
tqdm	../rbm_chords.py	/^from tqdm import tqdm$/;"	kind:namespace	line:10
updt	../rbm_chords.py	/^updt = [W.assign_add(W_adder), bv.assign_add(bv_adder), bh.assign_add(bh_adder)]$/;"	kind:variable	line:116
upperBound	../midi_manipulation.py	/^upperBound = 102$/;"	kind:variable	line:6
x	../rbm_chords.py	/^x = tf.placeholder(tf.float32, [None, n_visible], name="x")$/;"	kind:variable	line:59
x_sample	../rbm_chords.py	/^x_sample = gibbs_sample(1)$/;"	kind:variable	line:102
